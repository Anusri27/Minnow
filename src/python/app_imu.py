#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

import sys
import zmq
import time
# minnow comms
from minnow_comms.minnow_app_threaded import App
# flatbuffer serialization
import flatbuffers
# generated by flatc
import topics.nav.imu
import topics.nav.gps
# IMU driver USFS
from minnow_drivers.pyUSFS import pyUSFS

class IMU(App):
    def __init__(self):
        super().__init__()
        self.setup_subscribers()
        # setup flatbuffers
        self.fb_builder = flatbuffers.Builder(1024)
        # setup IMU sensor
        self.usfs = pyUSFS.USFS(2, calibrate=True)
        # variables
        self.nav_gps_msg = None
        self.magnetic_declination = -14.42   # default declination at MIT

    def setup_subscribers(self):
        self.subscribe('nav.gps', self.nav_gps_callback)    # subscribe to gps messages

    def nav_gps_callback(self, msg):
        self.nav_gps_msg = topics.nav.gps.gps.GetRootAsgps(msg, 0)

    def process(self):
        if self.nav_gps_msg is not None:
            self.magnetic_declination = self.nav_gps_msg.MagDeclination()

        self.usfs.fetchEventStatus()
        self.usfs.fetchSentralData()

        if self.usfs.algo_status == 8:
            status = 'locked'
        else:
            status = 'converging'
        usfs_status = self.fb_builder.CreateString(status)

        topics.nav.imu.imuStart(self.fb_builder)
        topics.nav.imu.imuAddTime(self.fb_builder, time.time())
        topics.nav.imu.imuAddStatus(self.fb_builder, usfs_status)
        topics.nav.imu.imuAddRoll(self.fb_builder, self.usfs.angle[0,0])
        topics.nav.imu.imuAddPitch(self.fb_builder, self.usfs.angle[1,0])
        topics.nav.imu.imuAddYaw(self.fb_builder, self.usfs.heading + self.magnetic_declination)
        topics.nav.imu.imuAddQuaternion0(self.fb_builder, self.usfs.qt[0,0])
        topics.nav.imu.imuAddQuaternionX(self.fb_builder, self.usfs.qt[1,0])
        topics.nav.imu.imuAddQuaternionY(self.fb_builder, self.usfs.qt[2,0])
        topics.nav.imu.imuAddQuaternionZ(self.fb_builder, self.usfs.qt[3,0])
        topics.nav.imu.imuAddAccelX(self.fb_builder, self.usfs.accel_data[0])
        topics.nav.imu.imuAddAccelY(self.fb_builder, self.usfs.accel_data[1])
        topics.nav.imu.imuAddAccelZ(self.fb_builder, self.usfs.accel_data[2])
        topics.nav.imu.imuAddGyroX(self.fb_builder, self.usfs.gyro_data[0,0])
        topics.nav.imu.imuAddGyroY(self.fb_builder, self.usfs.gyro_data[1,0])
        topics.nav.imu.imuAddGyroZ(self.fb_builder, self.usfs.gyro_data[2,0])
        topics.nav.imu.imuAddMagX(self.fb_builder, self.usfs.mag_data[0,0])
        topics.nav.imu.imuAddMagY(self.fb_builder, self.usfs.mag_data[1,0])
        topics.nav.imu.imuAddMagZ(self.fb_builder, self.usfs.mag_data[2,0])
        topics.nav.imu.imuAddPressure(self.fb_builder, self.usfs.pressure)
        topics.nav.imu.imuAddTemperature(self.fb_builder, self.usfs.temperature)

        print('Status: {}'.format(status))
        print('Roll: {:6.5f} deg'.format(self.usfs.angle[0,0]))
        print('Pitch: {:6.5f} deg'.format(self.usfs.angle[1,0]))
        print('Yaw: {:6.5f} deg'.format(self.usfs.heading + self.magnetic_declination))
        print('Magnetic Declination: {:6.5f} deg'.format(self.magnetic_declination))
        print('')

        imu_msg = topics.nav.imu.imuEnd(self.fb_builder)
        self.fb_builder.Finish(imu_msg)
        bin_imu_msg = self.fb_builder.Output()
        self.publish(b'nav.imu' + b' ' + bin_imu_msg)

        time.sleep(0.1)

if __name__ == "__main__":
    app = IMU()
    app.run()
