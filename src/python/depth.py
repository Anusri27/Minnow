#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

import sys
import zmq
import time
import math
import signal
from collections import deque
from threading import Thread
import flatbuffers
#generated by flatc
import topics.nav.depth
#pressure sensor
from ms5837 import MS5837

class Subscriber(Thread):
    def __init__(self, context, id, topics_callbacks):
        super().__init__()
        self.context = context
        self.topics_callbacks = topics_callbacks
        self.loop = False

    def run(self):
        print('starting subscriber, on topic(s) {}'.format(self.topics_callbacks.keys()))
        subscriber = self.context.socket(zmq.SUB)
        subscriber.connect("tcp://127.0.0.1:5555")
        for topic in self.topics_callbacks.keys():
            subscriber.setsockopt_string(zmq.SUBSCRIBE, topic)
        poller = zmq.Poller()
        poller.register(subscriber, zmq.POLLIN)
        self.loop = True
        while self.loop:
            evts = poller.poll(1000)
            if evts:
                message = subscriber.recv()
                for topic in self.topics_callbacks.keys():
                    topic_name_msg = message.split(None,1)
                    topic_name = topic_name_msg[0]
                    topic_msg = topic_name_msg[1]
                    if topic == topic_name.decode('utf-8'):
                        self.topics_callbacks[topic](topic_msg)

    def stop(self):
        self.loop = False

class Publisher:
    def __init__(self):
        signal.signal(signal.SIGINT, self.exit_signal)
        self.zmq_context = zmq.Context()
        self.setup_subscriber()
        #setup flatbuffers
        self.fb_builder = flatbuffers.Builder(1024)
        #setup depth sensor
        self.ms5837 = MS5837.MS5837(model=MS5837.MODEL_30BA, bus=1)
        self.depth = 0
        self.temperature = 0
        self.static_pressure = 0
        if not self.ms5837.init():
            print('Depth sensor initialization error!')
            exit(1)
        self.ms5837.setOSR(MS5837.OSR_8192)
        self.poll_interval = self.ms5837.getPollInterval()
        self.stabilize_sensor(2.0)

    def exit_signal(self, sig, frame):
        print('You pressed Ctrl+C!')
        sys.exit(0)

    def setup_subscriber(self):
        # NO SUBSCRIPTIONS
        pass

    def stabilize_sensor(self, num_seconds):
        i  =int(num_seconds/self.poll_interval)
        first = True
        while(i > 0):
          i -= 1
          if self.ms5837.read():
            if first:
              self.static_pressure = self.ms5837.pressure()
              first = False
            else :
              self.static_pressure = low_pass(self.ms5837.pressure(), self.static_pressure, 0.1)
          time.sleep(poll_interval)

    def low_pass(self, curr, prev, alpha):
        return curr*alpha + prev*(1-alpha)

    def run(self):
        socket = self.zmq_context.socket(zmq.PUB)
        socket.connect("tcp://127.0.0.1:5556")

        last_poll = time.monotonic()
        count = 0
        while True:
            current_time = time.monotonic()
            if current_time - last_poll >= self.poll_interval:
                count += 1

                topics.nav.depth.depthStart(self.fb_builder)
                topics.nav.depth.depthAddTime(self.fb_builder, time.time())

                if self.ms5837.read():
                    print("Pressure: %.2f atm  %.2f Torr  %.2f psi") % (
                    self.ms5837.pressure(MS5837.UNITS_atm),
                    self.ms5837.pressure(MS5837.UNITS_Torr),
                    self.ms5837.pressure(MS5837.UNITS_psi))
                    topics.nav.depth.depthAddPressure(self.fb_builder, self.ms5837.pressure(MS5837.UNITS_atm))

                    print("Temperature: %.2f C  %.2f F  %.2f K") % (
                    self.ms5837.temperature(MS5837.UNITS_Centigrade),
                    self.ms5837.temperature(MS5837.UNITS_Farenheit),
                    self.ms5837.temperature(MS5837.UNITS_Kelvin))
                    topics.nav.depth.depthAddTemp(self.fb_builder, self.ms5837.temperature(MS5837.UNITS_Centigrade))

                    self.ms5837.setFluidDensity(MS5837.DENSITY_FRESHWATER)
                    freshwater_depth = self.ms5837.depth(self.static_pressure)  # default is freshwater
                    self.ms5837.setFluidDensity(MS5837.DENSITY_SALTWATER)
                    saltwater_depth = self.ms5837.depth(self.static_pressure)
                    print("Depth: %.3f m (freshwater)  %.3f m (saltwater)") % (freshwater_depth, saltwater_depth)
                    topics.nav.depth.depthAddDepthFresh(self.fb_builder, freshwater_depth)
                    topics.nav.depth.depthAddDepthSalt(self.fb_builder, saltwater_depth)

                    depth_msg = topics.nav.depth.depthEnd(self.fb_builder)
                    self.fb_builder.Finish(depth_msg)
                    bin_depth_msg = self.fb_builder.Output()
                    socket.send(b'nav.depth' + b' ' + bin_depth_msg)

                    last_poll = time.monotonic()

            time.sleep(.001)

if __name__ == "__main__":
    pub = Publisher()
    pub.run()
