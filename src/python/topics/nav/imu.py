# automatically generated by the FlatBuffers compiler, do not modify

# namespace: nav

import flatbuffers

class imu(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsimu(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = imu()
        x.Init(buf, n + offset)
        return x

    # imu
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # imu
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # imu
    def Roll(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # imu
    def Pitch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # imu
    def Yaw(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # imu
    def AccelX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # imu
    def AccelY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # imu
    def AccelZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # imu
    def GyroX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # imu
    def GyroY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # imu
    def GyroZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # imu
    def Pressure(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # imu
    def Temp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def imuStart(builder): builder.StartObject(12)
def imuAddTime(builder, time): builder.PrependFloat64Slot(0, time, 0.0)
def imuAddRoll(builder, roll): builder.PrependFloat64Slot(1, roll, 0.0)
def imuAddPitch(builder, pitch): builder.PrependFloat64Slot(2, pitch, 0.0)
def imuAddYaw(builder, yaw): builder.PrependFloat64Slot(3, yaw, 0.0)
def imuAddAccelX(builder, accelX): builder.PrependFloat64Slot(4, accelX, 0.0)
def imuAddAccelY(builder, accelY): builder.PrependFloat64Slot(5, accelY, 0.0)
def imuAddAccelZ(builder, accelZ): builder.PrependFloat64Slot(6, accelZ, 0.0)
def imuAddGyroX(builder, gyroX): builder.PrependFloat64Slot(7, gyroX, 0.0)
def imuAddGyroY(builder, gyroY): builder.PrependFloat64Slot(8, gyroY, 0.0)
def imuAddGyroZ(builder, gyroZ): builder.PrependFloat64Slot(9, gyroZ, 0.0)
def imuAddPressure(builder, pressure): builder.PrependFloat64Slot(10, pressure, 0.0)
def imuAddTemp(builder, temp): builder.PrependFloat64Slot(11, temp, 0.0)
def imuEnd(builder): return builder.EndObject()
