# automatically generated by the FlatBuffers compiler, do not modify

# namespace: motor

import flatbuffers

class value(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsvalue(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = value()
        x.Init(buf, n + offset)
        return x

    # value
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # value
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # value
    def Motor1Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # value
    def Motor2Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # value
    def Motor3Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def valueStart(builder): builder.StartObject(4)
def valueAddTime(builder, time): builder.PrependFloat64Slot(0, time, 0.0)
def valueAddMotor1Value(builder, motor1Value): builder.PrependFloat32Slot(1, motor1Value, 0.0)
def valueAddMotor2Value(builder, motor2Value): builder.PrependFloat32Slot(2, motor2Value, 0.0)
def valueAddMotor3Value(builder, motor3Value): builder.PrependFloat32Slot(3, motor3Value, 0.0)
def valueEnd(builder): return builder.EndObject()
